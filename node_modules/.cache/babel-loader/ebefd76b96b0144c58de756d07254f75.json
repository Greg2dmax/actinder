{"ast":null,"code":"import _objectSpread from \"/home/greg2dmax/actinder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/greg2dmax/actinder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/greg2dmax/actinder/src/components/Deck.js\";\nimport React, { useState } from \"react\";\nimport { useSprings } from \"react-spring/hooks\";\nimport { useGesture } from \"react-with-gesture\";\nimport Card from \"./Card\";\nimport data from \"../data.js\";\nimport \"../styles/Deck.css\";\n\nconst to = i => ({\n  x: 0,\n  y: i * -10,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n});\n\nconst trans = (r, s) => \"perspective(1500px) rotateX(30deg) rotateY(\".concat(r / 10, \"deg) rotateZ(\").concat(r, \"deg) scale(\").concat(s, \")\");\n\nfunction Deck() {\n  const _useState = useState(() => new Set()),\n        _useState2 = _slicedToArray(_useState, 1),\n        gone = _useState2[0];\n\n  const _useSprings = useSprings(data.length, i => _objectSpread({}, to(i), {\n    from: from(i)\n  })),\n        _useSprings2 = _slicedToArray(_useSprings, 2),\n        props = _useSprings2[0],\n        set = _useSprings2[1];\n\n  const bind = useGesture(({\n    args: [index],\n    down,\n    delta: [xDelta],\n    distance,\n    direction: [xDir],\n    velocity\n  }) => {\n    const trigger = velocity > 0.2;\n    const dir = xDir < 0 ? -1 : 1;\n    if (!down && trigger) gone.add(index);\n    set(i => {\n      if (index !== i) return;\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n      const scale = down ? 1.1 : 1;\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === data.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  });\n  return props.map(({\n    x,\n    y,\n    rot,\n    scale\n  }, i) => /*#__PURE__*/React.createElement(Card, {\n    i: i,\n    x: x,\n    y: y,\n    rot: rot,\n    scale: scale,\n    trans: trans,\n    data: data,\n    bind: bind,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default Deck;","map":{"version":3,"sources":["/home/greg2dmax/actinder/src/components/Deck.js"],"names":["React","useState","useSprings","useGesture","Card","data","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","Set","gone","length","props","set","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useSprings } from \"react-spring/hooks\";\nimport { useGesture } from \"react-with-gesture\";\n\nimport Card from \"./Card\";\nimport data from \"../data.js\";\n\nimport \"../styles/Deck.css\";\n\nconst to = i => ({\n  x: 0,\n  y: i * -10,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\n\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\n    10}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck() {\n  const [gone] = useState(() => new Set());\n\n  const [props, set] = useSprings(data.length, i => ({\n    ...to(i),\n    from: from(i)\n  }));\n\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2;\n\n      const dir = xDir < 0 ? -1 : 1;\n\n      if (!down && trigger) gone.add(index);\n\n      set(i => {\n        if (index !== i) return;\n        const isGone = gone.has(index);\n\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n\n        const scale = down ? 1.1 : 1;\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n\n      if (!down && gone.size === data.length)\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  );\n\n  return props.map(({ x, y, rot, scale }, i) => (\n    <Card\n      i={i}\n      x={x}\n      y={y}\n      rot={rot}\n      scale={scale}\n      trans={trans}\n      data={data}\n      bind={bind}\n    />\n  ));\n}\n\nexport default Deck;\n"]},"metadata":{},"sourceType":"module"}